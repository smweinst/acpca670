#' @param alpha_new the constant that is multiplied by the confounder in the new simulated sample; default is also 2.5
#' @param nsim number of simulations to run; default is 100
#' @export
sim_apply_new_sample = function(n=5,b=10,p=400,alpha_orig=2.5,alpha_new=2.5,nsim = 100){
scores.cor.omega.new = matrix(nrow=nsim,ncol=2)
for (s in 1:nsim){
# simulate original dataset from which AC-PCA loadings will be obtained
sim_dat.s = sim_dat_fun(n=n,b=b,p=p,alpha=alpha_orig)
X.mat.s = sim_dat.s$X.mat
Y = sim_dat.s$Y
# tune lambda
acpca.s.tune = acPCA::acPCAtuneLambda(X = X.mat.s,
Y = Y,
nPC = 2,
lambdas = seq(0,10,0.05),
anov=T, kernel = "linear",quiet = T)
# get acpca loadings
acpca.s.loadings = acPCA::acPCA(X = X.mat.s, Y = Y,
lambda = acpca.s.tune$best_lambda,
kernel = "linear", nPC = 2)$v[,1:2]
# simulate a new dataset with alpha_new
sim_dat.s.new = sim_dat_fun(n=n,b=b,p=p,alpha=alpha_new)
X.mat.s.new = sim_dat.s.new$X.mat
# apply AC-PCA loadings from original sample to new sample:
Xv.newsamp = X.mat.s.new%*%acpca.s.loadings
omega.s.new = sim_dat.s.new$Omega
omega.s.new.shared = do.call("rbind",replicate(n,omega.s.new,simplify = F))
# pca on omega in new data:
pca_omega.new.scores = prcomp(omega.s.new.shared, center = T)$x
# pca_omega.new.scores = pca_omega.new$x # scores
# pca_omega.new.loadings = pca_omega.new$rotation # loadings
scores.cor.omega.new[s,] = sapply(1:2, FUN = function(t){
cor(Xv.newsamp[,t], pca_omega.new.scores[,t],method = "pearson") # correlation between scores
})
}
if (nsim > 1){
par(mfrow=c(1,1))
vioplot::vioplot(abs(scores.cor.omega.new[,1]),abs(scores.cor.omega.new[,2]),
ylim = c(0,1), ylab = c("Pearson correlation"),
col = "white", names = c("PC1","PC2"),
main = "Correlation with PC scores of shared component using AC-PCA loadings from a different sample");mtext(
bquote(paste(alpha['original'],"=",.(alpha_orig), "   ", alpha['new'], "=", .(alpha_new))),side = 3
)
}
else{
par(mfrow=c(1,2))
plot(pca_omega.new.scores[,1],pca_omega.new.scores[,2], main = "True Pattern",
xlab = "PC1", ylab = "PC2",type = 'n');text(
pca_omega.new.scores[,1],pca_omega.new.scores[,2],labels = sim_dat.s.new$labels
)
plot(Xv.newsamp[,1],Xv.newsamp[,2], type = 'n',xlab = "PC1",ylab = "PC2",
main = "AC-PCA from different sample applied");text(
labels = sim_dat.s.new$labels, col = sim_dat.s.new$group + 1,
Xv.newsamp[,1],Xv.newsamp[,2],
);    mtext(
bquote(paste(alpha['original'],"=",.(alpha_orig), "   ", alpha['new'], "=", .(alpha_new))),side = 3
)
}
}
sim_apply_new_sample(nsim=1)
sim_apply_new_sample(nsim=1)
sim_apply_new_sample(nsim=1)
sim_apply_new_sample(nsim=1)
sim_apply_new_sample(nsim=1)
sim_apply_new_sample()
#' @title Function to apply loadings from AC-PCA to new sample
#' @description User can specify alpha in the original sample and alpha in the new sample (i.e., samples differ in terms of strength of confounder)
#' @name sim_apply_new_sample
#' @param n the number of subjects; default is 5
#' @param b the number of brain regions; default is 10
#' @param p the number of features per brain region; default is 400
#' @param alpha_orig the constant that is multiplied by the confounder in the original simulated sample; default is 2.5
#' @param alpha_new the constant that is multiplied by the confounder in the new simulated sample; default is also 2.5
#' @param nsim number of simulations to run; default is 100
#' @export
sim_apply_new_sample = function(n=5,b=10,p=400,alpha_orig=2.5,alpha_new=2.5,nsim = 100){
scores.cor.omega.new = matrix(nrow=nsim,ncol=2)
for (s in 1:nsim){
# simulate original dataset from which AC-PCA loadings will be obtained
sim_dat.s = sim_dat_fun(n=n,b=b,p=p,alpha=alpha_orig)
X.mat.s = sim_dat.s$X.mat
Y = sim_dat.s$Y
# tune lambda
acpca.s.tune = acPCA::acPCAtuneLambda(X = X.mat.s,
Y = Y,
nPC = 2,
lambdas = seq(0,10,0.05),
anov=T, kernel = "linear",quiet = T)
# get acpca loadings
acpca.s.loadings = acPCA::acPCA(X = X.mat.s, Y = Y,
lambda = acpca.s.tune$best_lambda,
kernel = "linear", nPC = 2)$v[,1:2]
# simulate a new dataset with alpha_new
sim_dat.s.new = sim_dat_fun(n=n,b=b,p=p,alpha=alpha_new)
X.mat.s.new = sim_dat.s.new$X.mat
# apply AC-PCA loadings from original sample to new sample:
Xv.newsamp = X.mat.s.new%*%acpca.s.loadings
omega.s.new = sim_dat.s.new$Omega
omega.s.new.shared = do.call("rbind",replicate(n,omega.s.new,simplify = F))
# pca on omega in new data:
pca_omega.new.scores = prcomp(omega.s.new.shared, center = T)$x
# pca_omega.new.scores = pca_omega.new$x # scores
# pca_omega.new.loadings = pca_omega.new$rotation # loadings
scores.cor.omega.new[s,] = sapply(1:2, FUN = function(t){
cor(Xv.newsamp[,t], pca_omega.new.scores[,t],method = "pearson") # correlation between scores
})
}
if (nsim > 1){
par(mfrow=c(1,1))
vioplot::vioplot(abs(scores.cor.omega.new[,1]),abs(scores.cor.omega.new[,2]),
ylim = c(0,1), ylab = c("Pearson correlation"),
col = "white", names = c("PC1","PC2"),
main = "Correlation with PC scores of shared component using AC-PCA loadings from a different sample");mtext(
bquote(paste(alpha['original']," = ",.(alpha_orig), "   ", alpha['new'], " = ", .(alpha_new))),side = 3
)
}
else{
par(mfrow=c(1,2))
plot(pca_omega.new.scores[,1],pca_omega.new.scores[,2], main = "True Pattern",
xlab = "PC1", ylab = "PC2",type = 'n');text(
pca_omega.new.scores[,1],pca_omega.new.scores[,2],labels = sim_dat.s.new$labels
)
plot(Xv.newsamp[,1],Xv.newsamp[,2], type = 'n',xlab = "PC1",ylab = "PC2",
main = "AC-PCA from different sample applied");text(
labels = sim_dat.s.new$labels, col = sim_dat.s.new$group + 1,
Xv.newsamp[,1],Xv.newsamp[,2],
);    mtext(
bquote(paste(alpha['original']," = ",.(alpha_orig), "   ", alpha['new'], " = ", .(alpha_new))),side = 3
)
}
}
sim_apply_new_sample(nsim=10)
sim_apply_new_sample(nsim=10,alpha_orig = 0,alpha_new=0)
sim_apply_new_sample(nsim=10,alpha_orig = 0,alpha_new=-1)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github("smweinst/acpca670/acpca670_package")
library(acpca670)
library(acPCA)
set.seed(10)
par(mar=c(5,5,4,2))
acpca670::sim_compare_fun(nsim=1)
par(mar=c(5,5,4,2),cex = 2)
acpca670::sim_compare_fun(nsim=1)
par(mar=c(5,5,4,2),cex.axis=2)
acpca670::sim_compare_fun(nsim=1)
par(mar=c(5,5,4,2),cex=2)
acpca670::sim_compare_fun(nsim=1)
par(mar=c(5,5,4,2),cex=2,cex.axis=1)
acpca670::sim_compare_fun(nsim=1)
par(mar=c(5,5,4,2),cex=2,cex.axis=1,cex.pt=2)
?par
par(mar=c(5,5,4,2),cex=2,cex.axis=1,cex=3=2)
par(mar=c(5,5,4,2),cex=2,cex.axis=1,cex=3)
acpca670::sim_compare_fun(nsim=1)
par(mar=c(5,5,4,2),cex=2,cex.axis=1)
acpca670::sim_compare_fun(nsim=1)
set.seed(10)
par(mar=c(5,5,4,2),cex=2,cex.axis=1)
acpca670::sim_compare_fun(nsim=1)
set.seed(10)
par(mar=c(5,5,4,2),cex=2,cex.axis=1)
acpca670::sim_compare_fun(nsim=1)
par(mar=c(5,5,4,2),cex=2,cex.axis=1,cex.main=2)
acpca670::sim_compare_fun(nsim=1)
set.seed(10)
par(mar=c(5,5,4,2),cex=2,cex.axis=1,cex.main=1.5)
acpca670::sim_compare_fun(nsim=1)
par(mar=c(5,5,4,2),cex=2,cex.axis=1,cex.main=1.5,cex.lab=1.5)
acpca670::sim_compare_fun(nsim=1)
set.seed(10)
par(mar=c(5,5,4,2),cex=2,cex.axis=1,cex.main=1.5,cex.lab=1.5)
acpca670::sim_compare_fun(nsim=1)
set.seed(10)
acpca670::sim_compare_fun(nsim=2)
set.seed(10)
acpca670::sim_compare_fun()
acpca670::sim_apply_new_sample(alpha_orig=2.5,alpha_new=2.5)
acpca670::sim_apply_new_sample(alpha_orig=2.5,alpha_new=5)
acpca670::sim_apply_new_sample(alpha_orig=2.5,alpha_new=5,nsim=10s)
acpca670::sim_apply_new_sample(alpha_orig=2.5,alpha_new=5,nsim=10)
set.seed(10)
acpca670::sim_apply_new_sample(alpha_orig=2.5,alpha_new=2.5)
#' @title Function to apply loadings from AC-PCA to new sample
#' @description User can specify alpha in the original sample and alpha in the new sample (i.e., samples differ in terms of strength of confounder)
#' @name sim_apply_new_sample
#' @param n the number of subjects; default is 5
#' @param b the number of brain regions; default is 10
#' @param p the number of features per brain region; default is 400
#' @param alpha_orig the constant that is multiplied by the confounder in the original simulated sample; default is 2.5
#' @param alpha_new the constant that is multiplied by the confounder in the new simulated sample; default is also 2.5
#' @param nsim number of simulations to run; default is 100
#' @export
sim_apply_new_sample = function(n=5,b=10,p=400,alpha_orig=2.5,alpha_new=2.5,nsim = 100){
scores.cor.omega.new = matrix(nrow=nsim,ncol=2)
for (s in 1:nsim){
# simulate original dataset from which AC-PCA loadings will be obtained
sim_dat.s = sim_dat_fun(n=n,b=b,p=p,alpha=alpha_orig)
X.mat.s = sim_dat.s$X.mat
Y = sim_dat.s$Y
# tune lambda
acpca.s.tune = acPCA::acPCAtuneLambda(X = X.mat.s,
Y = Y,
nPC = 2,
lambdas = seq(0,10,0.05),
anov=T, kernel = "linear",quiet = T)
# get acpca loadings
acpca.s.loadings = acPCA::acPCA(X = X.mat.s, Y = Y,
lambda = acpca.s.tune$best_lambda,
kernel = "linear", nPC = 2)$v[,1:2]
# simulate a new dataset with alpha_new
sim_dat.s.new = sim_dat_fun(n=n,b=b,p=p,alpha=alpha_new)
X.mat.s.new = sim_dat.s.new$X.mat
# apply AC-PCA loadings from original sample to new sample:
Xv.newsamp = X.mat.s.new%*%acpca.s.loadings
omega.s.new = sim_dat.s.new$Omega
omega.s.new.shared = do.call("rbind",replicate(n,omega.s.new,simplify = F))
# pca on omega in new data:
pca_omega.new.scores = prcomp(omega.s.new.shared, center = T)$x
scores.cor.omega.new[s,] = sapply(1:2, FUN = function(t){
cor(Xv.newsamp[,t], pca_omega.new.scores[,t],method = "pearson") # correlation between scores
})
}
if (nsim > 1){
par(mfrow=c(1,1))
vioplot::vioplot(abs(scores.cor.omega.new[,1]),abs(scores.cor.omega.new[,2]),
ylim = c(0,1), ylab = c("Pearson correlation"),
col = "white", names = c("PC1","PC2"),
main = "Correlation with PC scores of shared component using AC-PCA loadings from another sample");mtext(
bquote(paste(alpha['original']," = ",.(alpha_orig), "   ", alpha['new'], " = ", .(alpha_new))),side = 3
)
}
else{
par(mfrow=c(1,2))
plot(pca_omega.new.scores[,1],pca_omega.new.scores[,2], main = "True Pattern",
xlab = "PC1", ylab = "PC2",type = 'n');text(
pca_omega.new.scores[,1],pca_omega.new.scores[,2],labels = sim_dat.s.new$labels
)
plot(Xv.newsamp[,1],Xv.newsamp[,2], type = 'n',xlab = "PC1",ylab = "PC2",
main = "AC-PCA from different sample applied");text(
labels = sim_dat.s.new$labels, col = sim_dat.s.new$group + 1,
Xv.newsamp[,1],Xv.newsamp[,2],
);    mtext(
bquote(paste(alpha['original']," = ",.(alpha_orig), "   ", alpha['new'], " = ", .(alpha_new))),side = 3
)
}
}
acpca670::sim_apply_new_sample(alpha_orig=2.5,alpha_new=2.5,nsim=10)
sim_apply_new_sample(alpha_orig=2.5,alpha_new=2.5,nsim=10)
#' @title Function to apply loadings from AC-PCA to new sample
#' @description User can specify alpha in the original sample and alpha in the new sample (i.e., samples differ in terms of strength of confounder)
#' @name sim_apply_new_sample
#' @param n the number of subjects; default is 5
#' @param b the number of brain regions; default is 10
#' @param p the number of features per brain region; default is 400
#' @param alpha_orig the constant that is multiplied by the confounder in the original simulated sample; default is 2.5
#' @param alpha_new the constant that is multiplied by the confounder in the new simulated sample; default is also 2.5
#' @param nsim number of simulations to run; default is 100
#' @export
sim_apply_new_sample = function(n=5,b=10,p=400,alpha_orig=2.5,alpha_new=2.5,nsim = 100){
scores.cor.omega.new = matrix(nrow=nsim,ncol=2)
for (s in 1:nsim){
# simulate original dataset from which AC-PCA loadings will be obtained
sim_dat.s = sim_dat_fun(n=n,b=b,p=p,alpha=alpha_orig)
X.mat.s = sim_dat.s$X.mat
Y = sim_dat.s$Y
# tune lambda
acpca.s.tune = acPCA::acPCAtuneLambda(X = X.mat.s,
Y = Y,
nPC = 2,
lambdas = seq(0,10,0.05),
anov=T, kernel = "linear",quiet = T)
# get acpca loadings
acpca.s.loadings = acPCA::acPCA(X = X.mat.s, Y = Y,
lambda = acpca.s.tune$best_lambda,
kernel = "linear", nPC = 2)$v[,1:2]
# simulate a new dataset with alpha_new
sim_dat.s.new = sim_dat_fun(n=n,b=b,p=p,alpha=alpha_new)
X.mat.s.new = sim_dat.s.new$X.mat
# apply AC-PCA loadings from original sample to new sample:
Xv.newsamp = X.mat.s.new%*%acpca.s.loadings
omega.s.new = sim_dat.s.new$Omega
omega.s.new.shared = do.call("rbind",replicate(n,omega.s.new,simplify = F))
# pca on omega in new data:
pca_omega.new.scores = prcomp(omega.s.new.shared, center = T)$x
scores.cor.omega.new[s,] = sapply(1:2, FUN = function(t){
cor(Xv.newsamp[,t], pca_omega.new.scores[,t],method = "pearson") # correlation between scores
})
}
if (nsim > 1){
par(mfrow=c(1,1))
vioplot::vioplot(abs(scores.cor.omega.new[,1]),abs(scores.cor.omega.new[,2]),
ylim = c(0,1), ylab = c("Pearson correlation"),
col = "white", names = c("PC1","PC2"),
main = "Correlation with shared component when AC-PCA from another sample is used");mtext(
bquote(paste(alpha['original']," = ",.(alpha_orig), "   ", alpha['new'], " = ", .(alpha_new))),side = 3
)
}
else{
par(mfrow=c(1,2))
plot(pca_omega.new.scores[,1],pca_omega.new.scores[,2], main = "True Pattern",
xlab = "PC1", ylab = "PC2",type = 'n');text(
pca_omega.new.scores[,1],pca_omega.new.scores[,2],labels = sim_dat.s.new$labels
)
plot(Xv.newsamp[,1],Xv.newsamp[,2], type = 'n',xlab = "PC1",ylab = "PC2",
main = "AC-PCA from different sample applied");text(
labels = sim_dat.s.new$labels, col = sim_dat.s.new$group + 1,
Xv.newsamp[,1],Xv.newsamp[,2],
);    mtext(
bquote(paste(alpha['original']," = ",.(alpha_orig), "   ", alpha['new'], " = ", .(alpha_new))),side = 3
)
}
}
sim_apply_new_sample(nsim=2)
sim_apply_new_sample(nsim=10)
roxygen2::roxygenise()
sim_apply_new_sample(nsim=1)
sim_apply_new_sample(nsim=1)
sim_apply_new_sample(nsim=1)
sim_apply_new_sample(nsim=1)
devtools::install_github("smweinst/acpca670/acpca670_package")
library(acpca670)
# Make sure that acPCA package is actually installed
# (installing my package above doesn't always guarantee this, still not sure why)
if (!"acPCA" %in% installed.packages()[,"Package"]){
devtools::install_github("linzx06/AC-PCA/R_package/acPCA")
}
library(acPCA)
set.seed(10)
acpca670::sim_apply_new_sample(alpha_orig=2.5,alpha_new=2.5)
set.seed(10)
acpca670::sim_apply_new_sample(alpha_orig=2.5,alpha_new=5)
set.seed(10)
# new sample example 3:
acpca670::sim_apply_new_sample(alpha_orig=2.5,alpha_new=1)
microbenchmark::microbenchmark(acpca670::sim_compare_fun(nsim=1))
microbenchmark::microbenchmark(acpca670::sim_compare_fun(nsim=1),times =5)
micr
?microbenchmark
system.time(acpca670::sim_compare_fun(nsim=1))
rbenchmark::benchmark(acpca670::sim_compare_fun(nsim=1),replications = 5)
test = rbenchmark::benchmark(acpca670::sim_compare_fun(nsim=1),replications = 10)
test
summary(test)
test$test
test$replications
test$relative
test
test = microbenchmark::microbenchmark(acpca670::sim_compare_fun(nsim=1),times=5)
test
test$expr
test$time
summary(test)
?microbenchmark
test = microbenchmark::microbenchmark(acpca670::sim_compare_fun(nsim=1),times=5,unit = "s")
test$time
test = microbenchmark::microbenchmark(acpca670::sim_compare_fun(nsim=1),times=5)
mb_1sim = microbenchmark::microbenchmark(acpca670::sim_compare_fun(nsim=1), times = 100)
summary(mb_1sim)
mb_1sim$time
mean(mb_1sim$time)
sd(mb_1sim$time)
mean(mb_1sim$time/1e+6)
sd(mb_1sim$time/1e+6)
1645.772/1000
162.1097/1000
source("sim_dat_fun.R")
getwed()
getwd()
list.files()
setwd("/R")
setwd("R")
list.files()
source("sim_dat_fun.R")
source("sim_compare_fun.R")
source("sim_apply_new_sample.R")
devtools::use_travis()
devtools::check()
devtools::use_travis()
usethis::use_travis()
usethis::use_appveyor()
list.files()
setwd(".")
list.files()
setwd("./")
list.files()
setwd("..")
list.files()
usethis::use_appveyor()
usethis::use_appveyor()
usethis::use_travis()
list.files()
usethis::use_travis()
list.files()
usethis::use_travis()
usethis::use_travis()
usethis::use_appveyor()
roxygen2::roxygenise()
usethis::use_travis()
roxygen2::roxygenise()
roxygen2::roxygenise()
usethis::use_appveyor()
usethis::use_travis()
usethis::use_travis_badge()
usethis::use_appveyor()
usethis::use_testthat()
library(testthat)
library(acpca670)
test_check("acpca670")
usethis::use_appveyor()
usethis::use_travis()
usethis::use_coverage("coveralls")
test=acpca670::sim_dat_fun()
test
test$X.mat
dim(test$X.mat)
test$Y
names(test)
test$group
library(acpca670)
detach("package:acPCA", unload = TRUE)
installed.packages()
installed.packages()["Package",]
class(installed.packages())
installed.packages()["Packages",]
installed.packages()[1,]
installed.packages()[,"Package"]
remove.packages("acPCA")
remove.packages("acpca670")
# install acpca670 R package from github
devtools::install_github("smweinst/acpca670/acpca670_package")
library(acpca670)
set.seed(10)
par(mar=c(5,5,4,2),cex=2,cex.axis=1,cex.main=1.5,cex.lab=1.5)
sim_compare_fun(nsim=1)
library(acPCA)
remove.packages("acPCA")
sim_compare_fun(nsim=1)
# install acpca670 R package from github
devtools::install_github("smweinst/acpca670/acpca670_package")
# install acpca670 R package from github
devtools::install_github("smweinst/acpca670/acpca670_package",force = TRUE)
detach("package:acPCA", unload = TRUE)
# install acpca670 R package from github
devtools::install_github("smweinst/acpca670/acpca670_package",force = TRUE)
library(acpca670)
set.seed(10)
par(mar=c(5,5,4,2),cex=2,cex.axis=1,cex.main=1.5,cex.lab=1.5)
sim_compare_fun(nsim=1)
# install acpca670 R package from github
devtools::install_github("smweinst/acpca670/acpca670_package")
?devtools::install_github
remove.packages("acpca670")
library(acpca670)
acpca670::sim_compare_fun()
remove.packages("acPCA")
acpca670::sim_compare_fun(nsim=2)
library(acPCA)
# install acpca670 R package from github
devtools::install_github("smweinst/acpca670/acpca670_package",force = TRUE)
library(acpca670)
set.seed(10)
par(mar=c(5,5,4,2),cex=2,cex.axis=1,cex.main=1.5,cex.lab=1.5)
sim_compare_fun(nsim=1)
# install acpca670 R package from github
if (!"acpca670" %in% installed.packages()[,"Package"]){
devtools::install_github("smweinst/acpca670/acpca670_package")
}
library(acpca670)
devtools::install_github("smweinst/acpca670/acpca670_package")
devtools::install_github("smweinst/acpca670/acpca670_package",force = TRUE)
#}
library(acpca670)
acpca670::sim_dat_fun(nsim=1)
acpca670::sim_compare_fun(nsim=1)
library(acpca670)
sim_compare_fun = NULL
library(acpca670)
sim_compare_fun()
test$Y
citation("sva")
head(sim_compare_fun)
library(acpca670)
head(sim_compare_fun)
sim_compare_fun()
sim_compare_fun
acpca670::sim_compare_fun
head(acpca670::sim_compare_fun)
acpca670::system.file()
acpca670::library.dynam.unload()
set.seed(10)
mb_1sim = microbenchmark::microbenchmark(acpca670::sim_compare_fun(nsim=1),
times = 100)
set.seed(10)
mb_1sim = microbenchmark::microbenchmark(sim_compare_fun(nsim=1),
times = 100)
acpca.loadings.cor
par(mfrow=c(1,1),cex.lab = 2)
set.seed(10)
# new sample example 1:
sim_apply_new_sample(alpha_orig=2.5,alpha_new=2.5,nsim=10)
imager::load.image("https://github.com/smweinst/acpca670/blob/master/fig2B_replication.png")
imager::load.image("https://github.com/smweinst/acpca670/blob/master/fig2B_replication.png")
imager::load.image("https://github.com/smweinst/acpca670/fig2B_replication.png")
imager::load.image("https://github.com/smweinst/acpca670/blob/master/fig2B_replication.png") %>% plot()
imager::load.image("https://github.com/smweinst/acpca670/blob/master/fig2B_replication.png") %>% plot()
magick::image_read_svg("https://github.com/smweinst/acpca670/blob/master/fig2B_replication.png")
magick::image_read("https://github.com/smweinst/acpca670/blob/master/fig2B_replication.png")
magick::image_read("https://github.com/smweinst/acpca670/blob/master/fig2B_replication.png")
remove.packages("acpca670")
remove.packages("acPCA")
